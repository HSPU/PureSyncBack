# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main", "dev" ]
  pull_request:
    branches: [ "main", "dev" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    - name: Run chmod to make gradlew executable
      run: chmod +x ./gradlew
    
    - name: Copy Secret
      env:
          OCCUPY_SECRET: ${{ secrets.OCCUPY_SECRET_KEY }}
          OCCUPY_SECRET_DIR: src/main/resources
          OCCUPY_SECRET_TEST_DIR: src/test/java/com/fcc/PureSync
          OCCUPY_SECRET_DIR_FILE_NAME: application-secret.properties
      run: |
          echo $OCCUPY_SECRET | base64 --decode > $OCCUPY_SECRET_DIR/$OCCUPY_SECRET_DIR_FILE_NAME && 
          echo $OCCUPY_SECRET | base64 --decode > $OCCUPY_SECRET_TEST_DIR/$OCCUPY_SECRET_DIR_FILE_NAME
    - name: Build with Gradle
      uses: gradle/gradle-build-action@bd5760595778326ba7f1441bcf7e88b49de61a25 # v2.6.0
      with:
         arguments: clean bootJar
 
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{secrets.DOCKERHUB_USERNAME}}
        password: ${{secrets.DOCKERHUB_TOKEN}}
    - name: build and release to DockerHub
      env:
        NAME: calisws
        REPO: backend
      run: |
        docker build --build-arg JAR_FILE=build/libs/*.jar -t $REPO . 
        docker tag $REPO:latest $NAME/$REPO:latest 
        docker push $NAME/$REPO:latest
    - name: deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.WAS_HOST }}
        username: ${{ secrets.WAS_USERNAME }} # ubuntu
        key: ${{ secrets.WAS_KEY }} # pem key
        script: |
          set -x
          # Redis 이미지를 Docker Hub에서 가져오기 (만약 이미지가 없다면)
          sudo docker pull redis:latest
          # Redis 데이터를 보존하는 Docker 볼륨 사용
          sudo docker run -d --name redis_fcc -p 6379:6379 -v ./redis/data:/data redis:latest
          /home/ubuntu/docker/cleaner.sh
          sudo docker compose -f /home/${{ secrets.WAS_USERNAME }}/docker/docker-compose.yml up -d
